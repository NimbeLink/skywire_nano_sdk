###
 # \file
 #
 # \brief Provides Skywire Nano board configurations
 #
 # (C) NimbeLink Corp. 2020
 #
 # All rights reserved except as explicitly granted in the license agreement
 # between NimbeLink Corp. and the designated licensee.  No other use or
 # disclosure of this software is permitted. Portions of this software may be
 # subject to third party license terms as specified in this software, and such
 # portions are excluded from the preceding copyright notice of NimbeLink Corp.
 ##

if BOARD_SKYWIRE_NANO_APP || BOARD_SKYWIRE_NANO_APP_V1_0_X

config BOARD
	default "skywire_nano_app" if BOARD_SKYWIRE_NANO_APP
	default "skywire_nano_app_v1_0_x" if BOARD_SKYWIRE_NANO_APP_V1_0_X

config STACK_ABI_VERSION
    string "Stack firmware Application Binary Interface (ABI) version"
    default "1.1.0+0" if BOARD_SKYWIRE_NANO_APP
    default "1.0.0+0" if BOARD_SKYWIRE_NANO_APP_V1_0_X
    help
        The minimum version of stack firmware on the Skywire Nano in order to be
        compatible with the Application Binary Interface (ABI). This can be used
        when signing images to prevent accidentally using new Non-Secure
        firmware on a device with older stack firmware.

        MCUBoot -- the Skywire Nano boot loader -- does not support a maximum
        version for its compatibility checking, however. As such, this cannot be
        used to prevent the opposite condition, where older Non-Secure firmware
        is used on a device with newer stack firmware.

DT_CHOSEN_Z_CODE_PARTITION := zephyr,code-partition

config FLASH_LOAD_SIZE
	default $(dt_chosen_reg_size_hex,$(DT_CHOSEN_Z_CODE_PARTITION))

config FLASH_LOAD_OFFSET
	default $(dt_chosen_reg_addr_hex,$(DT_CHOSEN_Z_CODE_PARTITION))

# The Skywire Nano boot loader expects our header to be a particular size
config ROM_START_OFFSET
    default 0x200

# The Secure stack firmware will manage TrustZone operations, so do not use the
# nRF Connect SDK implementation
config SPM
    default n

# The Secure stack firmware will manage the co-processor communications, so do
# not use our own BSDLIB
config BSD_LIBRARY
    default n

# We will always need to handle floating-point registers while running alongside
# the Secure stack firmware
config FPU
    default y
config FPU_SHARING
    default y

# We will not manage the clock on our own, as that's the Secure stack firmware's
# responsibility
config CLOCK_CONTROL
    default n

# The Secure stack firmware does not allow Non-Secure access to the crypto by
# default
config HW_CC3XX_FORCE_ALT
    default y

endif
