###
 # \file
 #
 # \brief Builds the Skywire Nano SDK
 #
 # (C) NimbeLink Corp. 2020
 #
 # All rights reserved except as explicitly granted in the license agreement
 # between NimbeLink Corp. and the designated licensee.  No other use or
 # disclosure of this software is permitted. Portions of this software may be
 # subject to third party license terms as specified in this software, and such
 # portions are excluded from the preceding copyright notice of NimbeLink Corp.
 ##

function(make_version name)
    # If the version information is being generated externally, we don't need to
    # generate it ourselves
    if (NOT "$ENV{NIMBELINK_VERSION_${name}_EXTERNAL}" STREQUAL "")
        message("Assuming ${name} version generated externally")

        return()
    endif()

    # Target names must be globally unique, so generate a name for this target
    set(targetName "generate${name}VersionTarget")

    # If the version string is being specified using our environment, pass that
    # directly to our generator
    if (NOT "$ENV{NIMBELINK_VERSION_${name}_STRING}" STREQUAL "")
        message("Using environment ${name} version string")

        set(versionArg "--string;$ENV{NIMBELINK_VERSION_${name}_STRING}")

    # Else, if the version string is specified using the string configuration,
    # pass that directly to our generator
    elseif(NOT "${CONFIG_NIMBELINK_VERSION_${name}_STRING}" STREQUAL "")
        message("Using configuration ${name} version string")

        set(versionArg "--string;${CONFIG_NIMBELINK_VERSION_${name}_STRING}")

    # Else, our command will find the version on its own
    else()
        message("Auto-detecting ${name} version string")

        set(versionArg "")
    endif()

    # Set the output file 'type'
    if ("${name}" STREQUAL "MCUBOOT")
        set(outputType "int")

    elseif ("${name}" STREQUAL "APP")
        set(outputType "str")

    else()
        message(ERROR "Cannot generate version file for '${name}'")
    endif()

    set(outputFile ${PROJECT_BINARY_DIR}/${CONFIG_NIMBELINK_VERSION_${name}_FILE})

    # Make a target for running our version generator each time a build
    # is done, regardless of whether or not there's work to be done
    #
    # In the event our version is generated by Git or similar, the file contents
    # might not change before the build is started and thus will not have a
    # CMake-recognized dependency to otherwise trigger the rebuild.
    add_custom_target(
        ${targetName}
        ALL
        VERBATIM

        BYPRODUCTS
            ${outputFile}

        COMMAND
            python -m nimbelink version
            ${versionArg}
            --type=${outputType}
            --output=${outputFile}
    )

    zephyr_library_sources(${outputFile})
endfunction()

# If we're generating versions
if (CONFIG_NIMBELINK_VERSION)
    zephyr_library()

    # Make our version files for MCUBoot and the application
    make_version("MCUBOOT")
    make_version("APP")

    # Things will want to include the C-parsable version file, so add the output
    # to the include paths
    zephyr_include_directories(${PROJECT_BINARY_DIR})

    # Add our source for providing versions
    zephyr_library_sources(version.c)
endif()
